In this scenario, you will learn how to apply rolling updates to your Services for configuration changes and new Docker Image versions without any downtime. The environment has been configured with two Docker Hosts.

A service is a high-level concept relating to a collection of tasks to be executed by workers. An example of a service is an HTTP Server running as a Docker Container on three nodes.

===

Step 1 - Update Limits
Services can be updated dynamically to control various settings and options. Internally, Docker manages how the updates should be applied. For certain commands, Docker will stop, remove and re-create the container. Potentially having all containers stopped at once is an important consideration regarding managing connections and uptime.

There are various settings you can control, view the help via 

$ docker service update --help

Task
To start, deploy a HTTP service. We will use this to update/modify the container settings.

$ docker swarm init && docker service create --name http --replicas 2 -p 80:80 katacoda/docker-http-server:v1

Once started, various properties can be updated. For example, adding a new environment variable to the containers. 

$ docker service update --env-add KEY=VALUE http

===

Alternatively, updating the CPU and memory limits. 

$ docker service update --limit-cpu 2 --limit-memory 512mb http

Once executed the results will be visible when you inspect the service. 
$ docker service inspect --pretty http

However, listing all container, you will see that they have been recreated with every update. 
$ docker ps -a.

===

Step 2 - Update Replicas
Not all updates require every container to be re-created. For example, scaling the number of replicas does not effect the existing containers.

Task
As an alternative to docker service scale, it is possible to use the update to define update how many replicas should be running. Below will update the replicas from two to six. Docker will then reschedule the additional four containers to be deployed.

$ docker service update --replicas=6 http

The number of replicas is viewable when inspecting the service 
$ docker service inspect --pretty http
===
Step 3 - Update Image
The most common scenario where updates will be used is when releasing a new version of the application via an updated Docker Image. As the Docker Image is a property of a container, it can be updated like the previous steps.

Task
The following command will re-create the instances of our HTTP service with :v2 tag of the Docker Image.

$ docker service update --image katacoda/docker-http-server:v2 http

If you open a new terminal window, you will notice that Swarm is performing a rolling update.

$ docker ps

By having a rolling update with multiple replicas, the application never goes down and you can perform zero-downtime deployments.

$ curl http://docker

The next step discusses how to control the rollout and zero-downtime deployments.

===
Step 4 - Rolling Updates
The aim is to deploy a new Docker Image without incurring any downtime. Zero downtime can be achieved by setting parallelism and a delay in the rollout. Docker can batch updates and perform them as a rollout across the cluster.

update-parallelism defines how many containers Docker should update at once. Depending on the number of replicas depends on how large you would batch up the requests.

update-delay defines how long to wait in-between each update batch. The delay is useful if you are application has a warm-up time, for example, starting the JVM or CLR. By specifying a delay, you can ensure that requests can still be processed while the process is starting.

Task
The two parameters are applied when running docker service update. In the example it will update one container at a time, waiting 10 seconds in-between each update. The update will be affecting the Docker Image used, but the parameters can apply to any of the possible update values

$ docker service update --update-delay=10s --update-parallelism=1 --image katacoda/docker-http-server:v3 http

After launching you will slowly see new v3 versions of the containers start and replace the existing v2. 

$ docker ps

Issuing HTTP requests to the load balancer will request it them being handled by both v2 and v3 containers resulting in a different output.

$ curl http://docker

It is important that your application can take this into account and handle two different versions being live concurrently.
===

