####
This scenario explores how to allow multiple containers to communicate with each other. The steps will explain how to connect a data-store, in this case, Redis, to an application running in a separate container.

This environment has been configured with a Docker client and daemon. The machine name the Docker daemon is running on is called docker. If you want to access any of the services, then use docker instead of localhost or 0.0.0.0.
####

Start Data Store

Run a redis server with a friendly name of redis-server which we'll connect to in the next step. This will be our source container.

docker run -d --name redis-server redis
Redis

Redis is a fast, open source, key-value data store.

====

$ps docker
--run redis
$docker run -d --name redis-server redis
--create link
==
How Links Work

In this example, we bring up a Alpine container which is linked to our redis-server. We've defined the alias as redis. When a link is created, Docker will do two things.

First, Docker will set some environment variables based on the linked to the container. These environment variables give you a way to reference information such as Ports and IP addresses via known names.

You can output all the environment variables with the env command. For example:
===
$docker run --link redis-server:redis alpine env 
===
Secondly, Docker will update the HOSTS file of the container with an entry for our source container with three names, the original, the alias and the hash-id. You can output the containers host entry using cat /etc/hosts
===
$ docker run --link redis-server:redis alpine cat /etc/hosts
===
With a link created you can ping the source container in the same way as if it were a server running in your network.
===
$ docker run --link redis-server:redis alpine ping -c 1 redis
===
Here is a simple node.js application which connects to redis using the hostname redis.
===
$ docker run -d -p 3000:3000 --link redis-server:redis katacoda/redis-node-docker-example
--test connecting
$ curl docker:3000
--launching redis CLI
$docker run -it --link redis-server:redis redis redis-cli -h redis
===
Issuing Commands

The command KEYS * will output the contents stored currently in the source redis container.

Type QUIT to exit the CLI.
====
