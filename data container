###
There are two ways of approaching stateful Containers, that is containers are store and persistent data for future use. This could be the container creating and storing data, for example, a database. Alternatively, it could be data requiring additional for instance the configuration or SSL certifications. This approach can also be used to backup data or debug containers.

One approach we've discussed is using the -v <host-dir>:<container-dir> option to map directories. The other approach is to use Data Containers. This scenario will introduce the advantages of using Data Containers.
###

$ docker ps
--When creating the container, we also provide a -v option to define where other containers will be reading/saving data.
$docker create -v /config --name dataContainer busybox
===
With the container in place, we can now copy files from our local client directory into the container.

To copy files into a container you use the command docker cp. The following command will copy the config.conf file into our dataContainer and the directory config.
===
$ docker cp config.conf dataContainer:/config/
===
Using the --volumes-from <container> option we can use the mount volumes from other containers inside the container being launched. In this case, we'll launch an Ubuntu container which has reference to our Data Container. When we list the config directory, it will show the files from the attached container.
===
$ docker run --volumes-from dataContainer ubuntu ls /config

===
If we wanted to move the Data Container to another machine then we can export it to a .tar file.

$ docker export dataContainer > dataContainer.tar

