$docker

Usage : Docker Command

A self-sufficient runtime for containers 

Options : 

  --config string      Location of client config files (default "/root/.docker")
  -D, --debug              Enable debug mode
      --help               Print usage
  -H, --host value         Daemon socket(s) to connect to (default [])
  -l, --log-level string   Set the logging level ("debug"|"info"|"warn"|"error"|"fatal") (default "info")
      --tls                Use TLS; implied by --tlsverify
      --tlscacert string   Trust certs signed only by this CA (default "/root/.docker/ca.pem")
      --tlscert string     Path to TLS certificate file (default "/root/.docker/cert.pem")
      --tlskey string      Path to TLS key file (default "/root/.docker/key.pem")
      --tlsverify          Use TLS and verify the remote
  -v, --version            Print version information and quit

-------
Command 		Description
docker attach 	Attach local standard input, output, and error streams to a running container
docker build 	Build an image from a Dockerfile
docker builder 	Manage builds
docker checkpoint 	Manage checkpoints
docker commit 	Create a new image from a container’s changes
docker config 	Manage Docker configs
docker container 	Manage containers
docker cp 	Copy files/folders between a container and the local filesystem
docker create 	Create a new container
docker deploy 	Deploy a new stack or update an existing stack
docker diff 	Inspect changes to files or directories on a container’s filesystem
docker engine 	Manage the docker engine
docker events 	Get real time events from the server
docker exec 	Run a command in a running container
docker export 	Export a container’s filesystem as a tar archive
docker history 	Show the history of an image
docker image 	Manage images
docker images 	List images
docker import 	Import the contents from a tarball to create a filesystem image
docker info 	Display system-wide information
docker inspect 	Return low-level information on Docker objects
docker kill 	Kill one or more running containers
docker load 	Load an image from a tar archive or STDIN
docker login 	Log in to a Docker registry
docker logout 	Log out from a Docker registry
docker logs 	Fetch the logs of a container
docker manifest 	Manage Docker image manifests and manifest lists
docker network 	Manage networks
docker node 	Manage Swarm nodes
docker pause 	Pause all processes within one or more containers
docker plugin 	Manage plugins
docker port 	List port mappings or a specific mapping for the container
docker ps 	List containers
docker pull 	Pull an image or a repository from a registry
docker push 	Push an image or a repository to a registry
docker rename 	Rename a container
docker restart 	Restart one or more containers
docker rm 	Remove one or more containers
docker rmi 	Remove one or more images
docker run 	Run a command in a new container
docker save 	Save one or more images to a tar archive (streamed to STDOUT by default)
docker search 	Search the Docker Hub for images
docker secret 	Manage Docker secrets
docker service 	Manage services
docker stack 	Manage Docker stacks
docker start 	Start one or more stopped containers
docker stats 	Display a live stream of container(s) resource usage statistics
docker stop 	Stop one or more running containers
docker swarm 	Manage Swarm
docker system 	Manage Docker
docker tag 	Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE
docker top 	Display the running processes of a container
docker trust 	Manage trust on Docker images
docker unpause 	Unpause all processes within one or more containers
docker update 	Update configuration of one or more containers
docker version 	Show the Docker version information
docker volume 	Manage volumes
docker wait 	Block until one or more containers stop, then print their exit codes

---
Step 1 Running A Container

The first task is to identify the name of docker Image which is configured to run redis . With Docker , all containers are started based on a Docker Image. These images contain everthing required to launch the process; the host doesnt require any configuration or depedencies.
For example to find image for redis , you would use docker search redis J. 

###############################################################################################################################################
#Redis is an open-source, networked, in-memory, key-value data store with optional durability. It is written in ANSI C. The development of Redis #is sponsored by Redis Labs today; before that, it was sponsored by Pivotal and VMware. According to the monthly ranking by DB-Engines.com, Redis #is the most popular key-value store. The name Redis 
################################################################################################################################################

$docker search redis J

-for run redis

$docker run -d redis J

-The launched container is running in the background 

$docker ps J #command lists all running containers , the image used to start the container and uptime

- Display the friendly name and ID 
$docker inspect <friendly-name | container ID> J

- Display messages the container has written to standard error or standard out
$docker logs <friendly-name | container ID> J

- The ports needs to be exposed via host 

$docker run -d --name redisHostPort -p 6379:6379 redist:latest

- Redis on a randomly available port
$docker run -d --name redisDynamic -p 6379 redis:latest J

##https://hub.docker.com/_/redis/

--Any data which needs to be saved on the docker Host , and not inside containers , should be stored in 
/opt/docker/data/redis


$docker run -d --name redisMapped -v /opt/docker/data/redis:/data redis J

--Docker allows you to use $PWD as a placeholder for current directory

$docker run ubuntu ps #launches an ubuntu container and executes the commands ps to view all process running on container

$docker run it ubuntu bash J #allows jane to get access to a bash shell inside of container


##Summary#################################################################################################################################
#In this scenario, jane had the requirement of running Redis . Jade decided to run this a docker container to make it easier to manage. The #commands jane discovered are the cornerstone of running Docker in both development and production environments.
##########################################################################################################################################




