When running containers in production, it can be useful to add additional metadata relating to the container to help their management. This metadata could be related to which version of the code is running, which applications or users own the container or define special criteria such as which servers they should run on.

This additional data is managed via Docker Labels. Labels allow you to define custom metadata about a container or image which can later be inspected or used as part of a filter.

This scenario guides you though creating and querying the metadata for containers and images.
Recommended Guidelines

There are recommended guidelines to follow when working with labels to ensure they're consistent and manageable as defined by Docker.

Firstly, all tools should prefix their keys with the reverse DNS notation of a domain controlled by the author. For example, com.katacoda.some-label.

Secondly, if you're creating labels for CLI use, then they should follow the DNS notation making it easier for users to type.

Finally, keys should only consist of lower-cased alphanumeric characters, dots and dashes (for example, [a-z0-9-.])
====
$docker run -l user=12345 -d redis J
==
This line creates two labels in the file, one for the user and the second assigning a role.
==
$ echo 'user=123461' >> labels && echo 'role=cache' >> labels
$ docker run --label-file=labels -d redis
==


Labelling images work in the same way as containers but are set in the Dockerfile when the image is built. When a container has launched the labels of the image will be applied to the container instance.
Single Label

Within a Dockerfile you can assign a label using the LABEL instruction. Below the label vendor is created with the name Scrapbook.

LABEL vendor=Katacoda
Multiple Labels

If we want to assign multiple labels then, we can use the format below with a label on each line, joined using a back-slash ("\"). Notice we're using the DNS notation format for labels which are related to third party tooling.

LABEL vendor=Katacoda \ com.katacoda.version=0.0.5 \ com.katacoda.build-date=2016-07-01T10:47:29Z \ com.katacoda.course=Docker

==
$ docker inspect rd J
$ docker inspect -f "{{json .Config.Labels }}" rd
$ docker inspect -f "{{json .ContainerConfig.Labels }}" katacoda-label-example
--query by label
$ docker ps --filter "label=user=scrapbook"
--filtering image
$ docker images --filter "label=vendor=Katacoda"
===
We'll explore more about customising Docker's configuration and how labels are used in future scenarios, but as a taster, the syntax is below.

docker -d \
  -H unix:///var/run/docker.sock \
  --label com.katacoda.environment="production" \
  --label com.katacoda.storage="ssd"
===
summary

In this scenario we explored how you can use labels to assign metadata to your Docker containers and images. This metadata can provide additional context around individual items or as use with a filter to find the information you're looking for.
Recommended Guidelines

As mentioned at the beginning, there are a number of recommended guidelines to follow when working with labels to ensure they're consistent and manageable as defined by Docker.

Firstly, all tools should prefix their keys with the reverse DNS notation of a domain controlled by the author. For example, com.joinscrapbook.some-label.

Secondly, if you're creating the labels for CLI use then it they should not follow the DNS notation making it easier for users to type.

Finally, keys should only consist of lower-cased alphanumeric characters, dots and dashes (for example, [a-z0-9-.])
===
