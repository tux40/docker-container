This scenario explores how to create a docker network allowing containers to communicate. We'll also explore the Embedded DNS Server added in Docker 1.10.

Docker has two approaches to networking. The first defines a link between two containers. This link updates /etc/hosts and environment variables to allow containers to discover and communicate.

The alternate approach is to create a docker network that containers are connected too. The network has similar attributes to a physical network, allowing containers to come and go more freely than when using links.

===
to start with we create the network with our preefined name
$ docker network create backend-network
==
When we launch new containers, we can use the --net attribute to assign which network they should be connected to. 
==
$ docker run -d --name=redis --net=backend-network redis
===
Task: Explore

The first thing you'll notice is that Docker no longer assigns environment variables or updates the hosts file of containers. Explore using the following two commands and you'll notice it no longer mentions other containers.
===
$ docker run --net=backend-network alpine env
$ docker run --net=backend-network alpine cat /etc/hosts
$ docker run --net=backend-network alpine cat /etc/resolv.conf
$ docker run --net=backend-network alpine ping -c1 redis

===
Connect Two Containers

Docker supports multiple networks and containers being attached to more than one network at a time.

For example, let's create a separate network with a Node.js application that communicates with our existing Redis instance.
====
Task

The first task is to create a new network in the same way.
==

$ docker network create frontend-network

==
When using the connect command it is possible to attach existing containers to the network.
==
$ docker network connect frontend-network redis
==
When we launch the web server, given it's attached to the same network it will be able to communicate with our Redis instance.
==
$ docker run -d -p 3000:3000 --net=frontend-network katacoda/redis-node-docker-example
==
You can test it using 
==
curl docker:3000
==
Connect Container with Alias

The following command will connect our Redis instance to the frontend-network with the alias of db.
===
$docker network create frontend-network2
$docker network connect --alias db frontend-network2 redis
===
When containers attempt to access a service via the name db, they will be given the IP address of our Redis container.
===
$docker run --net=frontend-network2 alpine ping -c1 db

==
Step 5 - Disconnect Containers

With our networks created, we can use the CLI to explore the details.

The following command will list all the networks on our host.
===
$ docker network ls

==
We can then explore the network to see which containers are attached and their IP addresses.
==
$ docker network inspect frontend-network
==
The following command disconnects the redis container from the frontend-network.
==
$ docker network disconnect frontend-network redis

