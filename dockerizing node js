##########

This scenario continues to explore how to build and deploy your applications as a Docker container. The previous scenario covered deploying a static HTML website. This scenario explores how to deploy a Node.js application within a container.

The environment is configured with access to a personal Docker instance, and the code for a default Expressjs application is in the working directory. To view the code use ls and cat <filename> or use the editor.

The machine name Docker is running on is called docker. If you want to access any of the services then use docker instead of localhost or 0.0.0.0.

Based on blog post by Ben Hall
###########

$touch Dockerfile
FROM node:10-alpine J

RUN mkdir -p /src/app

WORKDIR /src/app

COPY package.json /src/app/package.json

RUN npm install

COPY . /src/app

EXPOSE 3000

CMD [ "npm", "start" ]

$docker build -t my-nodejs-app . J
$docker run -d --name my-running-app -p 3000:3000 my-nodejs-app


##
Testing Container

You can test the container is accessible using curl. If the application responds then you know that everything has correctly started.

$curl http://docker:3000

###############
With Docker, environment variables can be defined when you launch the container. For example with Node.js applications, you should define an environment variable for NODE_ENV when running in production.

Using -e option, you can set the name and value as -e NODE_ENV=production
###########
$docker run -d --name my-production-running-app -e NODE_ENV=production -p 3000:3000 my-nodejs-app
